
DROP TABLE IF EXISTS ADDRESS;
CREATE TABLE ADDRESS(ID INT PRIMARY KEY, STREET VARCHAR(255), HOUSE_NUMBER INT, CITY VARCHAR(255), PC VARCHAR(255));
INSERT INTO Address (ID,STREET,HOUSE_NUMBER,CITY,PC) VALUES (1,'test','12','Tallinn','10119 ');


DROP TABLE IF EXISTS USER;
CREATE TABLE USER(ID INT PRIMARY KEY, USERNAME VARCHAR(255), PASSWORD VARCHAR(255), EMAIL VARCHAR(255));

INSERT INTO USER(ID,USERNAME,PASSWORD,EMAIL) VALUES (1,'feride','12345','fferide.celik@gmail.com');


DROP TABLE IF EXISTS ACCOUNT;
CREATE TABLE ACCOUNT(ID INT PRIMARY KEY, IBAN VARCHAR(255), CUSTOMER_NAME VARCHAR(255), AMOUNT DOUBLE);

DROP TABLE IF EXISTS CUSTOMER;
CREATE TABLE CUSTOMER(ID INT PRIMARY KEY, NAME VARCHAR(255), LAST_UPDATE TIMESTAMP);


DROP TABLE IF EXISTS POST;
CREATE TABLE POST(ID INT PRIMARY KEY, TITLE VARCHAR(255));

DROP TABLE IF EXISTS POST_DETAILS;
CREATE TABLE POST_DETAILS(ID INT PRIMARY KEY, CREATED_ON DATE, CREATED_BY VARCHAR(100), POST_ID INT, foreign key (POST_ID) references POST(ID));


DROP TABLE IF EXISTS CART;
CREATE TABLE CART(ID INT PRIMARY KEY, NAME VARCHAR(255), TOTAL DOUBLE);

DROP TABLE IF EXISTS ITEMS;
CREATE TABLE ITEMS(ID INT PRIMARY KEY, CODE VARCHAR(255), PRICE DOUBLE, QUANTITY INT,
CART_ID INT, foreign key (CART_ID) references CART(ID));



DROP TABLE IF EXISTS EMPLOYEE;
CREATE TABLE EMPLOYEE(ID INT PRIMARY KEY, NAME VARCHAR(255));

DROP TABLE IF EXISTS PROJECT;
CREATE TABLE PROJECT(ID INT PRIMARY KEY, TITLE VARCHAR(255));

DROP TABLE IF EXISTS EMPLOYEE_PROJECT;
CREATE TABLE EMPLOYEE_PROJECT(EMPLOYEE_ID INT NOT NULL, PROJECT_ID INT NOT NULL,
foreign key (EMPLOYEE_ID) references EMPLOYEE(ID), foreign key (PROJECT_ID) references PROJECT(ID),
PRIMARY KEY(EMPLOYEE_ID, PROJECT_ID));



DROP TABLE IF EXISTS PERSON;
CREATE TABLE PERSON(ID INT PRIMARY KEY, FIRST_NAME VARCHAR(255), LAST_NAME VARCHAR(255),
EMAIL VARCHAR(255), COUNTRY VARCHAR(100));


DROP TABLE IF EXISTS PHONE;
CREATE TABLE PHONE(ID INT PRIMARY KEY, PHONE_NUMBER VARCHAR(255), PHONE_TYPE VARCHAR(100),
PERSON_ID INT, foreign key (PERSON_ID) references PERSON(ID));